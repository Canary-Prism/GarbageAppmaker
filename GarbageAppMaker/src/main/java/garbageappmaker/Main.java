/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package garbageappmaker;

import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import javax.swing.filechooser.FileNameExtensionFilter;

import java.awt.BorderLayout;
import java.io.File;
import java.util.Arrays;

public class Main {

    public static final String VERSION = "1.0";

    public static final String[] CHANGELOG = {
        "made the thing"
    };

    public static final int ROOM = 20;

    public static void main(String[] args) {
        new Main().make();
    }

    private JFrame frame = new JFrame("GarbageAppMaker");

    private JLabel dud = new JLabel();

    private JLabel main_label = new JLabel("<html><h1>GarbageAppMaker</h1></html>");
    private JButton start_button = new JButton("Start");
    private JButton about_button = new JButton("About");

    private JButton back_button = new JButton("Back");

    public void make() {
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        main_label.setBounds(ROOM, ROOM, 300, 50);

        start_button.addActionListener(e -> start());
        about_button.addActionListener(e -> aboutMenu());

        start_button.setBounds(ROOM + 30, ROOM + 50, 100, 30);
        about_button.setBounds(ROOM + 30, ROOM + 80, 100, 30);

        about_label.setBounds(ROOM, ROOM, 300, 300);
        about_label.setVerticalAlignment(SwingConstants.TOP);

        changelog_button.setBounds(ROOM, ROOM + 150, 100, 30);
        version_label.setBounds(ROOM + 100, ROOM + 150, 100, 30);

        back_button.addActionListener(e -> mainMenu());

        String temp = "<html><h1>Changelog</h1>" + Main.VERSION;
        for (int i = 0; i < Main.CHANGELOG.length; i++) {
            temp += "<br />â€¢" + Main.CHANGELOG[i];
        }
        temp += "</html>";

        changelog_label.setText(temp);

        changelog_button.addActionListener(e -> changelogMenu());

        changelog_label.setVerticalAlignment(SwingConstants.TOP);

        frame.setResizable(false);

        mainMenu();
        frame.setVisible(true);
    }

    public void mainMenu() {
        frame.setResizable(false);
        frame.getContentPane().removeAll();

        frame.getContentPane().add(main_label);

        frame.getContentPane().add(start_button);
        frame.getContentPane().add(about_button);

        frame.getContentPane().add(dud);


        frame.setSize(220 + ROOM * 2, 200 + ROOM * 2);
    }

    private void start() {
        frame.dispose();
        new Maker().start();
    }

    private JLabel about_label = new JLabel("<html><h1>About</h1>So... i got tired of having to write the sameish bit of code over and over again... so obviously the logical solution is to spend time to write a program that does that for me :D</html>");

    private JButton changelog_button = new JButton("Changelog");

    private JLabel version_label = new JLabel(VERSION);

    private JLabel changelog_label = new JLabel();

    private void aboutMenu() {
        frame.getContentPane().removeAll();

        back_button.setBounds(ROOM + 200, ROOM + 150, 100, 30);

        frame.getContentPane().add(about_label);
        frame.getContentPane().add(version_label);
        frame.getContentPane().add(changelog_button);
        frame.getContentPane().add(back_button);

        frame.getContentPane().add(dud);

        frame.setSize(300 + ROOM * 2, 200 + ROOM * 2);
    }

    private void changelogMenu() {
        frame.getContentPane().removeAll();

        frame.getContentPane().add(back_button, BorderLayout.PAGE_END);

        frame.getContentPane().add(changelog_label);

        frame.setResizable(true);
        frame.setSize(400 + Main.ROOM, Main.CHANGELOG.length * 30 + 140 + Main.ROOM);
    }


    public static File chooseSaveFile(String extension) {
        File file;
        JFileChooser fc = new JFileChooser();
        JPanel panel = new JPanel();

        panel.setVisible(true);
        fc.setFileFilter(new FileNameExtensionFilter("." + extension + " Files Only", extension));
        fc.setDialogType(JFileChooser.SAVE_DIALOG);

        if (fc.showSaveDialog(panel) == JFileChooser.APPROVE_OPTION) {
            String fileName = fc.getSelectedFile().getAbsolutePath();

            if (!fileName.endsWith(extension))
                fileName += extension;
            
            file = new File(fileName);
            return file;

        } else {
            JOptionPane.showMessageDialog(null, "Cancelled");
            System.exit(0);
            return null;
        }
    }

    public void e() {

    }

    public static final String[] KEYWORDS = {
        "abstract", 
        "continue", 
        "for", 
        "new", 
        "switch", 
        "assert", 
        "default", 
        "goto", 
        "package", 
        "synchronized", 
        "boolean", 
        "do", 
        "if", 
        "private", 
        "this", 
        "break", 
        "double", 
        "implements", 
        "protected", 
        "throw", 
        "byte", 
        "else", 
        "import", 
        "public", 
        "throws", 
        "case", 
        "enum", 
        "instanceof", 
        "return", 
        "transient", 
        "catch", 
        "extends", 
        "int", 
        "short", 
        "try", 
        "char", 
        "final", 
        "interface", 
        "static", 
        "void", 
        "class", 
        "finally", 
        "long", 
        "strictfp", 
        "volatile", 
        "const", 
        "float", 
        "native", 
        "super", 
        "while"
    };

    public static boolean isValidIdentifier(String value) {
        if (!Character.isJavaIdentifierStart(value.charAt(0)))
            return false;
        for (char c : value.toCharArray())
            if (!Character.isJavaIdentifierPart(c))
                return false;
        if (Arrays.asList(KEYWORDS).contains(value))
            return false;
        
        return true;
    }
}
